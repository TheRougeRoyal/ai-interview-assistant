name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U app" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    env:
      DATABASE_URL: postgresql://app:app@localhost:5432/app
      NODE_ENV: test
      AI_VENDOR: mock
      AI_MODEL: gpt-4o-mini
      JWT_SECRET: testsecretlongenough123456
      NEXT_PUBLIC_PERSIST_TO_API: 'false'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Prepare database schema
        run: npx prisma db push

      - name: Lint
        run: npm run lint --silent

      - name: Typecheck
        run: npm run typecheck --silent

      - name: Build
        run: npm run build --silent

      - name: Unit & integration tests
        run: npm run test:unit && npm run test:integration
name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: Install, Lint, Typecheck, Unit tests, Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:unit

      - name: Build (production)
        run: |
          # Use mock AI vendor during build to avoid external calls
          AI_VENDOR=mock OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next

  e2e:
    name: Playwright E2E
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ (github.event_name == 'push' && contains(github.ref, 'main')) || github.event_name == 'pull_request' }}
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start app
        run: |
          nohup npm run dev &
          # Wait for dev server to be ready
          npx wait-on http://localhost:3000 && sleep 1
        env:
          NEXT_PUBLIC_API_MOCK: 'true'

      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.browser }} --reporter=github

  preview-deploy:
    name: Vercel Preview Deploy (PR)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.event_name == 'pull_request' }}

    steps:
      - uses: actions/checkout@v4

      - name: Deploy Preview to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          # No --prod flag so Vercel will create a Preview Deployment for the PR
          vercel-args: ''

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'


