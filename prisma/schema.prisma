// Prisma schema for AI Interview Assistant persistence layer
// SQLite local (file) / Postgres in production via DATABASE_URL

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // hashed password
    role      String   // 'interviewer' or 'interviewee'
  name      String?
  phone     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Sessions for authentication
  sessions  UserSession[]
  
  // If user is interviewer, they can score answers
  scores    Score[]
  
  // If user is interviewee, they have a candidate profile
  candidate Candidate?
  
  @@index([email])
  @@index([role])
  @@index([createdAt])
}







model UserSession {
  id             String   @id @default(cuid())
  userId         String
  token          String   @unique
  refreshToken   String?  @unique
  expiresAt      DateTime
  lastActivityAt DateTime @default(now())
  ipAddress      String?
  userAgent      String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([refreshToken])
  @@index([userId])
  @@index([expiresAt])
}

model Candidate {
  id           String   @id @default(cuid())
  userId       String?  @unique // Links to User (interviewee), optional for migration
  name         String
  email        String
  phone        String?
  resumeFile   String?
  resumeMime   String?
  resumeSize   Int?
  resumeText   String?
  finalScore   Int?
  summary      String?
  strengthsJson String? // JSON array of strings
  gap          String?
  
  // AI-extracted resume analysis
  skillsJson   String? // JSON object with categorized skills
  experienceYears Int? // Years of experience from AI analysis
  seniorityLevel String? // entry, mid, senior, lead, executive
  qualityScore Int? // Resume quality score 0-100
  aiSummary    String? // AI-generated professional summary
  aiStrengthsJson String? // JSON array of AI-identified strengths
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sessions     InterviewSession[]
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([createdAt])
  @@index([finalScore])
  @@index([seniorityLevel])
  @@index([experienceYears])
  @@unique([email])
}

model InterviewSession {
  id              String   @id @default(cuid())
  candidateId     String
  stage           String
  currentIndex    Int
  planJson        String   // serialized JSON array
  answers         Answer[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Candidate       Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  @@index([candidateId])
  @@index([stage])
  @@index([createdAt])
}

model Answer {
  id            String   @id @default(cuid())
  sessionId     String
  questionIndex Int
  difficulty    String
  question      String
  answerText    String?
  durationMs    Int
  timeTakenMs   Int?
  rubricJson    String? // serialized rubric
  submittedAt   DateTime?

  Session       InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  scores        Score[]

  @@unique([sessionId, questionIndex])
  @@index([sessionId])
  @@index([difficulty])
  @@index([submittedAt])
}

model Score {
  id         String   @id @default(cuid())
  answerId   String
  reviewerId String   // User ID of the interviewer who scored this
  score      Int      // Score out of 100
  feedback   String?  // Optional written feedback
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  answer     Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  reviewer   User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  
  @@unique([answerId, reviewerId]) // One score per reviewer per answer
  @@index([answerId])
  @@index([reviewerId])
}

model ProcessingJob {
  id                String   @id @default(cuid())
  fileId            String   // Reference to stored file
  fileName          String
  fileSize          Int
  format            String   // pdf, docx, etc.
  status            String   // pending, processing, completed, failed, cancelled
  progress          Int      @default(0) // 0-100
  
  // Processing options (JSON)
  optionsJson       String?
  
  // Result data (JSON)
  resultJson        String?
  extractedText     String?
  metadataJson      String?
  
  // Error information
  errorCode         String?
  errorMessage      String?
  errorRecoverable  Boolean  @default(true)
  
  // Retry tracking
  retryCount        Int      @default(0)
  maxRetries        Int      @default(3)
  lastRetryAt       DateTime?
  nextRetryAt       DateTime?
  
  // Priority and timing
  priority          String   @default("normal") // low, normal, high
  estimatedDuration Int?     // milliseconds
  actualDuration    Int?     // milliseconds
  
  // Timestamps
  createdAt         DateTime @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  updatedAt         DateTime @updatedAt
  
  // User association (optional)
  userId            String?
  
  @@index([status])
  @@index([createdAt])
  @@index([userId])
  @@index([priority, status])
}

model AuditLog {
  id            String   @id @default(cuid())
  
  // User information
  userId        String?
  userEmail     String?
  userName      String?
  
  // Action details
  action        String   // e.g., "user.login", "candidate.create", "answer.score"
  resource      String   // Resource type: user, candidate, answer, etc.
  resourceId    String?  // ID of the affected resource
  
  // Request context
  method        String?  // HTTP method
  path          String?  // API path
  ipAddress     String?
  userAgent     String?
  
  // Action metadata
  changes       String?  // JSON: before/after values for updates
  metadata      String?  // JSON: additional context
  
  // Result
  status        String   // success, failure, error
  statusCode    Int?     // HTTP status code
  errorMessage  String?
  
  // Timestamps
  timestamp     DateTime @default(now())
  duration      Int?     // milliseconds
  
  // Correlation
  correlationId String?  // For tracing related actions
  sessionId     String?  // User session
  
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([correlationId])
}

